apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.quasar-utils'
apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

description 'Corda Business Networks Integration demo'

cordapp {
    info {
        name "Corda Business Networks Integration Demo"
        vendor "R3"
        targetPlatformVersion corda_platform_version.toInteger()
        minimumPlatformVersion 1
    }
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/kotlin')
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // Cordformation needs a SLF4J implementation when executing the Network
    // Bootstrapper, but Log4J doesn't shutdown completely from within Gradle.
    // Use a much simpler SLF4J implementation here instead.
    cordaRuntime "org.slf4j:slf4j-simple:$slf4j_version"

    // Corda integration dependencies
    cordaRuntime project(path: ":node:capsule", configuration: 'runtimeArtifacts')
    cordaRuntime project(path: ":testing:testserver:testcapsule:", configuration: 'runtimeArtifacts')

    cordapp project(':samples:business-networks-demo:contracts')
    cordapp project(':samples:business-networks-demo:workflows')

    testCompile(project(':node-driver')) {
        // We already have a SLF4J implementation on our runtime classpath,
        // and we don't need another one.
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }
    
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "junit:junit:$junit_version"

    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${junit_vintage_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_version}"

    testCompile "org.assertj:assertj-core:$assertj_version"

    integrationTestCompile project(':testing:testserver')
}

task integrationTest(type: Test, dependsOn: []) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    nodeDefaults {
        projectCordapp {
            deploy = false
        }
        cordapp project(':samples:business-networks-demo:contracts')
        cordapp project(':samples:business-networks-demo:workflows')
    }
    node {
        name "O=Notary Service,L=Zurich,C=CH"
        notary = [validating: true]
        p2pPort 10002
        rpcSettings {
            address "localhost:10003"
            adminAddress "localhost:10004"
        }
    }
    node {
        name "O=Bank A,L=London,C=GB"
        p2pPort 10005
        rpcSettings {
            address "localhost:10006"
            adminAddress "localhost:10007"
        }
        rpcUsers = [[user: "BNOUser", password: "test", permissions: ["ALL"]]]
    }
    node {
        name "O=Bank B,L=New York,C=US"
        p2pPort 10008
        rpcSettings {
            address "localhost:10009"
            adminAddress "localhost:10011"
        }
        rpcUsers = [[user: "Member1", password: "test", permissions: ["ALL"]]]
    }
    node {
        name "O=Bank C,L=New York,C=US"
        p2pPort 10011
        rpcSettings {
            address "localhost:10012"
            adminAddress "localhost:10015"
        }
        rpcUsers = [[user: "Member2", password: "test", permissions: ["ALL"]]]
    }
}